import org.asciidoctor.gradle.jvm.AsciidoctorTask
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask


plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'io.gatling.gradle' version '3.9.0.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id "org.openapi.generator" version "6.2.1"
    id "org.ajoberstar.git-publish" version "4.1.1"
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.25"

}

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "maven-publish"

group 'com.uk.vk'
version '0.0.1-SNAPSHOT'

ext {
    openApiSpecFile = "$rootDir/openapi/cucumber.yaml"
    asciiDocStaticDir = "$rootDir/docs"
    asciiDocBuildDir = "$buildDir/docs"
}

repositories {
    maven { url nexusPublicRepoURL }
    maven { url nexusReleaseRepoURL }
    mavenCentral()

}

dependencies {

    //selenium
    testImplementation 'org.testng:testng:7.6.0'
    implementation("org.seleniumhq.selenium:selenium-java:4.6.0")
    implementation("org.seleniumhq.selenium:selenium-chrome-driver:4.6.0")

    //junit
    implementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    //springframework
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation("org.springframework:spring-web:6.0.2")

    //lombok
    implementation 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    runtimeOnly 'com.h2database:h2'

    //Json parsing
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    implementation 'net.datafaker:datafaker:1.7.0'

    //rest assured - cucumber test
    implementation 'io.rest-assured:rest-assured:5.2.0'
    implementation "io.cucumber:cucumber-core:7.8.1"
    implementation "io.cucumber:cucumber-java:7.8.1"
    implementation "io.cucumber:cucumber-junit:7.8.1"
    implementation "io.cucumber:cucumber-spring:7.8.1"
    implementation group: 'org.json', name: 'json', version: '20220924'

    //jakarta
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

    // Added to run gatling performance tests
//    implementation ("commons-validator:commons-validator:1.7")
    implementation("io.gatling:gatling-app:3.9.0") { exclude group: 'org.scala-lang' }
//    implementation("org.scala-lang:scala-library:2.13.10"){ exclude group: 'org.apache.logging.log4j' }
//    implementation("io.gatling.highcharts:gatling-charts-highcharts:3.9.0"){ exclude group: 'org.scala-lang' }
//    implementation ('org.springframework:spring-jdbc:5.3.24')
//    implementation("org.springframework.kafka:spring-kafka:${versionSpringKafka}")
//    implementation("io.confluent:kafka-avro-serializer:${versionConfluentSerializer}")
//    implementation ("org.apache.avro:avro:${versionApacheAvro}")
//    implementation ("org.apache.kafka:kafka-clients:${versionKafkaClients}")
    //implementation ("ch.qos.logback:logback-core:1.4.5")
    //implementation ("ch.qos.logback:logback-classic:1.4.5")
//}

}

configurations.all {
    exclude group: "org.glassfish", module: "jakarta.el"
}
test {
    useJUnitPlatform()
}

gatling{
    simulations = {
//        include "**demo/ChecksDemoSimulation.java"
        include "**demo/BasicSimulation.java"
//        include "**demo/BasicSimulation.java"
    }
}

tasks.register('cleanDocs', Delete) {
    group 'docs'
    description 'clean up auto generated documentation'
    delete 'build/docs'
}

tasks.register('buildOpenApiDocs', GenerateTask) {
    group 'openapi tools'
    generatorName = "asciidoc"
    inputSpec = openApiSpecFile
    outputDir = "$asciiDocBuildDir/spec"
    configOptions = [
            skipExamples: "false"
    ]
}

tasks.register('buildDocs', AsciidoctorTask) {
    group 'docs'
    dependsOn buildOpenApiDocs
    doFirst {
        copy {
            from asciiDocStaticDir
            into asciiDocBuildDir
        }
    }
    sourceDir asciiDocBuildDir
    outputDir asciiDocBuildDir
    attributes 'documentationDir': asciiDocBuildDir,
            'app-name': project.name,
            'reproducible': 'true',
            'revnumber': 'LATEST'
    dependsOn build
}

cucumberReports {
    reports = files("$asciiDocBuildDir/test-reports/cucumber-report.json")
    outputDir = file("$asciiDocBuildDir/test-reports/")
    buildId = '0'
    projectNameOverride = "cucumber-report"
}

//gitPublish {
//    repoUri = "githubpath.git"
//    branch = 'docs'
//    contents {
//        from("$asciiDocBuildDir") {
//            into '.'
//        }
//    }
//}

//tasks.register('publishDocs') {
//    group "docs"
//    finalizedBy gitPublishPush
//}

//tasks.register('buildAndPublishDocs') {
//    group "docs"
//    finalizedBy publishDocs
//    dependsOn(buildDocs)
//}
